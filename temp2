
void discinitbase(node *p, long sitei)
{
  /* traverse tree to initialize base at internal nodes */
  node *q;
  long i, largest;

  if (p->tip)                                    /* back out if it is a tip */
    return;
  q = p->next;
  while (q != p)                             /* loop over this fork's nodes */
  {
    if (q->back)
    {
      memcpy(((discretepars_node*)q)->discnumnuc,
         ((discretepars_node*)p)->discnumnuc, endsite * sizeof(discnucarray));
      for (i = (long)zero; i <= (long)seven; i++)
      {        /* if state  i  is at  q->back, reduce count of steps needed */
        if (((discretepars_node*)q->back)->discbase[sitei - 1] & (1 << i))
          ((discretepars_node*)q)->discnumnuc[sitei - 1][i]--;
      }
      if (p->back)
      {            /* if there is a node at the other end of the branch ... */
        for (i = (long)zero; i <= (long)seven; i++)
        {      /* if  p->back  has state  i  increase count of steps needed */
          if (((discretepars_node*)p->back)->discbase[sitei - 1] & (1 << i))
            ((discretepars_node*)q)->discnumnuc[sitei - 1][i]++;
        }
      }
      largest = discgetlargest(((discretepars_node*)q)->discnumnuc[sitei - 1]);
      ((discretepars_node*)q)->discbase[sitei - 1] = 0;
      for (i = (long)zero; i <= (long)seven; i++)
      {         /* set up state as those states that require fewest changes */
        if (((discretepars_node*)q)->discnumnuc[sitei - 1][i] == largest)
          ((discretepars_node*)q)->discbase[sitei - 1] |= (1 << i);
      }
    }
    q = q->next;
  }
  q = p->next;    /* go around circle again initializing bases for  q->back */
  while (q != p)
  {
    if (q->back != NULL)
      discinitbase(q->back, sitei);
    q = q->next;
  }
} /* initbase */


void inittreetrav(node *p, long sitei)
{
  /* traverse tree to clear boolean initialized and set up base.
   * unlike function  inittrav  this does not only set inward-looking
   * initialized booleans to false, but all of them at all forks */
  node *q;

  if (p == NULL)                                /* unless it's an empty tip */
    return;
  if (p->tip)
  {
    discinitmin((discretepars_node*)p, sitei, false);   /* initialize state */
 /* debug printf("initialize it in node %ld\n", p->index); */
    p->initialized = true;                       /* mark tip as initialized */
    return;
  } else {
    q = p->next;                                /* for an interior fork ... */
    while (q != p)
    {                            /* go around the fork circle, for each ... */
      if (q != NULL) {
        inittreetrav(q->back, sitei);        /* ... go recursively outwards */
        discinitmin((discretepars_node*)q, sitei, true);
/* debug  printf("initialize it in node %ld\n", q->index); */
        q->initialized = false;
      }
      q = q->next;
    }
    discinitmin((discretepars_node*)p, sitei, true);  /* initializing state */
/* printf("initialize it in node %ld\n", p->index); debug */
    p->initialized = false;    /* ... marking them as needing to be updated */
  }
} /* inittreetrav */


void disccompmin(node *p, node *desc)
{
  /* computes minimum lengths from  p  on beyond it, where we are going around
   * a fork circle and have got to the node in the circle whose back node
   * is  desc */
  long i, j, minn, cost, desclen, descrecon=0, maxx;

  maxx = 10 * spp;          /* a value bigger than number of steps could be */
  for (i = (long)zero; i <= (long)seven; i++) /* for all possible states... */
  {                                           /* ,,, at node  p */
    minn = maxx;
    for (j = (long)zero; j <= (long)seven; j++)        /* for state in desc */
    {
      if (i == j)               /* set cost of change to zero if same state */
        cost = 0;
      else                                       /* otherwise set it to one */
        cost = 1;
      if (((discretepars_node*)desc)->disccumlengths[j] == -1)
      {     /* if  state  i  would not be possible, make it too big a value */
        desclen = maxx;
      }
      else
      {                          /* number of steps from  desc  on outwards */
        desclen = ((discretepars_node*)desc)->disccumlengths[j];
      }
      if (minn > cost + desclen)         /* would it have too many changes? */
      {
        minn = cost + desclen;                 /* set  minn  to lower value */
        descrecon = 0;
      }
      if (minn == cost + desclen)         /* if  j  is a possible state ... */
      {        /* ... then increment the number of possible reconstructions */
        descrecon += ((discretepars_node*)desc->back)->discnumreconst[j];
      }
    }
    ((discretepars_node*)p)->disccumlengths[i] += minn;    /* add to length */
    ((discretepars_node*)p)->discnumreconst[i] *= descrecon;    /* multiply */
/*  debug printf("state %ld: minn, descrecon are %ld, %ld\n", i, minn, descrecon);*/
  }
  p->initialized = true;     /* mark stuff from here on out as already done */
} /* disccompmin */


void minpostorder(node *p, pointarray treenode)
{
  /* traverses an n-ary tree, computing minimum steps at each node */
  node *q;

  if (p == NULL)
    return;
  if (p->tip)
  {
    return;
  }
/* debug printf("minpostorder on node  %ld\n", p->index);  */
  if (!p->initialized) {
    q = p->next;    /* around fork ring, do minpostorder on backs as needed */
    while (q != p)
    {
      if ((q->back) != NULL) {
        if (!(q->back->initialized)) {
          minpostorder(q->back, treenode);
        }
        disccompmin(p, q->back);    /* part of conditional score for branch */
      }
      q = q->next;
    }
    p->initialized = true;  /* set node initialized once one has done those */
  }
}  /* minpostorder */
     

void branchlength(node *subtr1, node *subtr2, double *brlen, pointarray treenode)
{
  /* computes a branch length between two subtrees for a given site */
  long i, j, minn, cost, minsteps, numreconst, nom, denom;

  minpostorder(subtr1, treenode);   /* make sure have steps further out ... */
  minpostorder(subtr2, treenode);              /* ... at each end of branch */
  minn = 10 * spp;                 /* a value that is too big to be correct */
  nom = 0;                       /* the numerator that is being accumulated */
  denom = 0;                                     /* ... and the denominator */
  for (i = (long)zero; i <= (long)seven; i++) /* for all states at both ... */
  {
/* debug printf("for state %ld at %ld, disccumlengths = %ld\n", (long)i, subtr1->index, ((discretepars_node*)subtr1)->disccumlengths[i]); */
/* debug printf("for state %ld at %ld, disccumlengths = %ld\n", (long)i, subtr2->index, ((discretepars_node*)subtr2)->disccumlengths[i]); */
    for (j = (long)zero; j <= (long)seven; j++)       /* ... ends of branch */
    {
      if (i == j)                            /* count 1 for each difference */
        cost = 0;
      else
        cost = 1;
      if (((discretepars_node*)subtr1)->disccumlengths[i] != -1 &&
          (((discretepars_node*)subtr2)->disccumlengths[j] != -1))
      {                                  /* if both states are possible ... */
        minsteps = ((discretepars_node*)subtr1)->disccumlengths[i] + cost +
                    ((discretepars_node*)subtr2)->disccumlengths[j];
        if (minsteps < minn)
        {
          minn = minsteps;     /* update  minn  as smallest possible so far */
          nom = 0;               /* ... and restart accumulating tied steps */
          denom = 0;
        }
        if (minsteps == minn)
        {     /* add to numerator, denominator, weighted by reconstructions */
          numreconst = ((discretepars_node*)subtr1)->discnumreconst[i] *
                         ((discretepars_node*)subtr2)->discnumreconst[j];
          nom += numreconst * cost;
          denom += numreconst;
        }
      }
    }
  }
  if (denom == 0)
    *brlen = 0.0;
  else
    *brlen = (double)nom/(double)denom;    /* cast to doubles so get double */
/* debug printf("branch length for branch %ld:%ld is %6.2f\n", subtr1->index, subtr2->index, *brlen); */
} /* branchlength */


void branchlentrav(node *p, node *root, long sitei, long chars, double *brlen, pointarray treenode)
{
  /*  traverses the tree computing tree length at each branch */
  node *q;

/* debug if (p->back == NULL)
printf("computing branch length for branch %ld:(NULL) for site %ld\n", p->index, sitei); */
/* debug else */
/* debug printf("computing branch length for branch %ld:%ld for site %ld\n", p->index, p->back->index, sitei); */
  if (p->tip)         /* bail if  p  is a tip as already have branch length */
    return;
/* debug:  to avoid recursive infinite loop */
#if 0
  if (p->index == outgrno) /* if outgroup a tip go to nearest interior fork */
    p = p->back;
#endif
  q = p->next;
  do {
    if (q->back != NULL)        /* if this node does not connect to nothing */
    {
/* debug printf("computing branch length for branch %ld:%ld for site %ld\n", q->index, q->back->index, sitei); */
      branchlength(q, q->back, brlen, treenode);  /* get branch length here */
/* debug printf("branch length for site %ld branch %ld:%ld is: %f\n", sitei, q->index, q->back->index, *brlen); */
      q->v += (weight[sitei - 1]  * (*brlen));   /* set node branch lengths */
      q->back->v += (weight[sitei - 1] * (*brlen));
/* debug printf("branch length up to site %ld branch %ld:%ld is: %f\n", sitei, q->index, q->back->index, q->v); */
      if (!q->back->tip)                        /* traverse out of  q->back */
        branchlentrav(q->back, root, sitei, chars, brlen, treenode);
    }
    q = q->next;                              /* move on around fork circle */
  } while (q != p);
  if (p->back != NULL) {
    if (p == root) {
      branchlength(p, p->back, brlen, treenode); /* finally do for outgroup */
      p->v += (weight[sitei - 1]  * (*brlen));   /* set node branch lengths */
      p->back->v += (weight[sitei - 1] * (*brlen));
    }
/* debug printf("branch length up to site %ld branch %ld:%ld is: %f\n", sitei, p->index, p->back->index, q->v); */
  }
}  /* branchlentrav */

