#
# Makefile for Mac OS X for PHYLIP 4.0.
#
PACKAGE=phylip
VERSION=4.0

# You should not need to change anything, though if you want you could
# change the first (noncomment) statement -- the one that sets the
# folder (directory) in which the executables will be placed -- to some
# directory location that might be more useful.
#
# The compressed tar archive phylip.tar.Z when uncompressed and extracted
# puts the source code into a directory ./src, and also makes two other
# directories ./exe and ./doc for the final executables and the documentation
# files.  Only change the EXEDIR settings if you want something different
# from that structure.
#
# If it causes trouble in compiling, the CFLAGS statement below may also need
# to be changed.
#
# It is assumed that the files command.in, Info.plist.in, and the
# icon files (*.icns) are also in the src/mac directory.
#
# To use the PHYLIP v4.0 Makefile, type:
#
#      make install         to compile the whole package and install
#                           the executables in $(EXEDIR), and then
#                           remove the object files to save space.
#
#      make all             to compile the whole package but not install it
#                           or remove the object files.
#
#      make put             to move the executables into $(EXEDIR).
#
#      make clean           to remove all object files and executables from the
#                           current directory.
#
#      make dnaml.app       to compile, link, and make a clickable executable
#                           for one program. The executables will stay
#                           in the src directory.
#
#      make dnaml.install   to compile, link, make a clickable executable,
#                           for one program and move the executable to the
#                           executables directory
#
# ----------------------------------------------------------------------------
# Starting here is the section where you may want to change things.
# ----------------------------------------------------------------------------
#
# These are the statements we have been talking about:
#
# One of the reasons for changing them would be to put the executables on a different file system.
# The default configuration is to have within the overall PHYLIP directory three subdirectories:
#   "src" for source code, "exe" for the executables, and "doc" for the documentation files.
#
# The following specifies the directory where the executables will be placed:
EXEDIR = ../exe
#
# the following specifies the directory where the testdata will be placed
TESTDIR  = ../exe/testdata
# ----------------------------------------------------------------------------
#
# The following statements set these variables:
#
#    CFLAGS -- compiler directives needed to compile most programs
#    LIBS   -- non-default system libraries needed to compile most programs
#    CC     -- the name (and, optionally, location) of your C compiler
#
# We've provided a set of possible values for each variable.
#
# The value used is the one without a "#" at the beginning of the line.
#
# To try an alternate value, make sure the one you want has no "#"
# as its first character and that all other possibilities have "#" for
# their first character.
#
# Advanced users may need to further edit one of the alternatives in
# order to correctly compile on their system.
#
# ----------------------------------------------------------------------------
#
# In the following statements (the ones that set CFLAGS, LIBS and
# CC) you should make sure each is set properly.
# Usually this will simply involve making sure that the proper statement
# has no "#" as its first character and that all other possibilities
# have "#" for their first character.
#
# ----------------------------------------------------------------------------
#
# This is the CFLAGS statement:
#
# If these statements say "-g"  and that causes trouble, remove the "-g".
# If the "-lX11" does not work (X compiling not working), you may want to
# remove that switch or fix it.
#
# Here are some possible CFLAGS statements:
#
# A minimal one which tells Phylip that is is running on a modern Mac
#CFLAGS  = -DMACOS10
#
# A basic one for debugging:
CFLAGS  = -ggdb -DMACOS10 
#
# For some serious debugging using GNU GCC.  This raises debug warning reporting to highest level possible.
# ifeq ($(MODE), GDB)
#   # No optimization; intended for debugging with GDB.  Debug level is "-ggdb3", maximal for GDB.  Originally was "-g".  Maximal debug information preserved (at cost of "-Wuninitialized" warning).
#   CFLAGS=-ggdb3 -std=c99 -Wall -Wmain -Wmissing-prototypes -Wreturn-type -Wstrict-prototypes -Wunused -Wextra -pedantic -Wredundant-decls -Waggregate-return -Wcast-align -Wcomment
# else
#   # Minimal optimization; intended for debugging via compilation but not using GDB.  Debug level is "-g", good for debugging but not maximal for GDB.
#   CFLAGS=-g -std=c99 -O -Wall -Wmain -Wmissing-prototypes -Wreturn-type -Wstrict-prototypes -Wunused -Wextra -pedantic -Wuninitialized -Wredundant-decls -Waggregate-return -Wcast-align -Wcomment
#   # In case value is not defined (or bogus), give MODE a value to indicate "NORMAL" compilation; used only for display.
#   MODE=NORMAL
# endif
#
# An optimized one for gcc:
#CFLAGS  = -O3 -DMACOS10 -fomit-frame-pointer
#
# For some serious debugging using Gnu gcc:
#CFLAGS=-g -DMACOS10 -Wall -Wmain -Wmissing-prototypes -Wreturn-type -Wstrict-prototypes -Wunused -Werror -Wredundant-decls -Waggregate-return -Wcast-align -Wcomment
#
# For doing code coverage with gcov:
#CFLAGS	=	-ggdb -DMACOS10 -fprofile-arcs -ftest-coverage
#CFLAGS	=	-pg -DMACOS10
#
# For Digital Alpha systems with Compaq Tru64 Unix
# (however, be aware that this may cause floating-point problems in programs
#  like Dnaml owing to not using IEEE floating point standards):
#CFLAGS = -fast -DMACOS10
#
# For making universal binaries:
#CFLAGS = -g -DMACOS10 -Wall -arch ppc -arch i386
#CFLAGS = -O3 -DMACOS10 -Wall -arch ppc -arch i386 -mmacosx-version-min=10.1
#
# For making non-universal binaries in case your system can't handle UBs:
#CFLAGS = -g -DMACOS10 -Wall
#
# ----------------------------------------------------------------------------
#
# These are the libraries for the CC compiles:
#
# Use this one to include debugging facility.
#LIBS    = Slist.o phylip.o debug.o
#
LIBS    = Slist.o phylip.o
LDADD   = -lm
#
# ----------------------------------------------------------------------------
#
# The next two assignments are the invocations of the compiler for the
# ordinary compiles and the tree-drawing programs, CC and DC:
#
# This one specifies the "cc" C compiler:
#CC        = cc $(CFLAGS)
#
#  To use GCC instead, if it is not the compiler that "cc" invokes:
CC         = gcc $(CFLAGS)
#
#
# ----------------------------------------------------------------------------
# After this point there should not be any reason to change anything,
# except for the commands at the bottom which add the icons in Mac OS X.
# ----------------------------------------------------------------------------
#
# The list of programs.
# Draw programs are listed last since they are the most likely to cause
# compilation or linking problems.
#
PROGS = clique \
        codml \
        consense \
        contml \
        contrast \
        dnacomp \
        dnadist \
        dnainvar \
        dnaml \
        dnamlk \
        dnamove \
        dnapars \
        dnapenny \
        dolmove \
        dollop \
        dolpenny \
        factor \
        fitch \
        gendist \
        kitsch \
        mix \
        move \
        neighbor \
        pars \
        penny \
        proml \
        promlk \
        protdist \
        protpars \
        restdist \
        restml \
        retree \
        seqboot \
        threshml \
        treedist \
        drawgram \
        drawtree

DYLIBS  =       libclique.dylib \
                libcodml.dylib \
                libconsense.dylib \
                libcontml.dylib \
                libdnacomp.dylib \
                libdnadist.dylib \
                libdnainvar.dylib \
                libdnaml.dylib \
                libdnamlk.dylib \
                libdnapars.dylib \
                libdnapenny.dylib \
                libdollop.dylib \
                libdolpenny.dylib \
                libdrawgram.dylib \
                libdrawtree.dylib \
                libfactor.dylib \
                libfitch.dylib \
                libgendist.dylib \
                libkitsch.dylib \
                libmix.dylib \
                libneighbor.dylib \
                libpars.dylib \
                libpenny.dylib \
                libproml.dylib \
                libpromlk.dylib \
                libprotdist.dylib \
                libprotpars.dylib \
                librestdist.dylib \
                libseqboot.dylib \
                libtreedist.dylib

JARS    =       javajars/Clique.jar \
                javajars/CodML.jar \
                javajars/Consense.jar \
                javajars/ContML.jar \
                javajars/DnaComp.jar \
                javajars/DnaDist.jar \
                javajars/DnaInvar.jar \
                javajars/DnaML.jar \
                javajars/DnaMLK.jar \
                javajars/DnaPars.jar \
                javajars/DnaPenny.jar \
                javajars/DolPenny.jar \
                javajars/Dollop.jar \
                javajars/DrawGram.jar \
                javajars/DrawTree.jar \
                javajars/Factor.jar \
                javajars/Fitch.jar \
                javajars/GenDist.jar \
                javajars/Kitsch.jar \
                javajars/Mix.jar \
                javajars/Neighbor.jar \
                javajars/Pars.jar \
                javajars/Penny.jar \
                javajars/Phylip.jar \
                javajars/ProML.jar \
                javajars/ProMLK.jar \
                javajars/ProtDist.jar \
                javajars/ProtPars.jar \
                javajars/RestDist.jar \
                javajars/Retree.jar \
                javajars/SeqBoot.jar \
                javajars/TreeDist.jar

APPS  = clique.app \
        codml.app \
        consense.app \
        contml.app \
        contrast.app \
        dnacomp.app \
        dnadist.app \
        dnainvar.app \
        dnaml.app \
        dnamlk.app \
        dnamove.app \
        dnapars.app \
        dnapenny.app \
        dollop.app \
        dolmove.app \
        dolpenny.app \
        drawgram.app \
        drawtree.app \
        factor.app \
        fitch.app \
        gendist.app \
        kitsch.app \
        mix.app \
        move.app \
        neighbor.app \
        pars.app \
        penny.app \
        proml.app \
        promlk.app \
        protdist.app \
        protpars.app \
        restdist.app \
        restml.app \
        retree.app \
        seqboot.app \
        threshml.app \
        treedist.app

TESTDIR=   clique codml consense contml contrast dnacomp \
      dnadist dnainvar dnaml dnamlk dnapars dnapenny dollop \
      dolmove dolpenny drawgram drawtree factor fitch gendist \
      kitsch mix move neighbor pars penny proml promlk \
      protdist protpars restdist restml retree seqboot treedist

#
# General commands.
#

#
#  The first target it executed if you just type "make".  It tells you how to use the Makefile.
#
help:
	@echo ""
	@echo " To use the PHYLIP $(VERSION) Makefile, type:"
	@echo ""
	@echo "     make install           to compile the whole package and install"
	@echo "                            the executables in $(EXEDIR), and then"
	@echo "                            remove the object files to save space."
	@echo ""
	@echo "     make all               to compile the whole package but not install it"
	@echo "                            or remove the object files."
	@echo ""
	@echo "     make dylibs            to compile the dynamic libraries used by the"
	@echo "                            Java interface."
	@echo ""
	@echo "     make progs             to compile the command line executables"
	@echo "                            (this differs from apps in that it makes"
	@echo "                            drawgram and drawtree)."
	@echo ""
	@echo "     make put               to move the executables into $(EXEDIR)."
	@echo ""
	@echo "     make clean             to remove all object files and executables from the"
	@echo "                            current directory."
	@echo ""
	@echo "     make dnaml.app         to compile, link, and make a clickable executable"
	@echo "                            for one program (in this example, dnaml)."
	@echo "                            The executables will stay in the src directory."
	@echo ""
	@echo "     make dnaml.install     to compile, link, make a clickable executable,"
	@echo "                            for one program and move the executable"
	@echo "                            to the executables directory."
	@echo ""
	@echo "     make libdnaml.dylib    to compile and link a specific dynamic library "
	@echo "                            needed by a Java interface."
	@echo "                            The library will stay in the src directory."

all:  introduce $(PROGS) $(DYLIBS)
	@echo ""
	@echo "Finished compiling."

introduce:
	@echo ""
	@echo "Building PHYLIP version $(VERSION)."

install: pre-clean apps put clean
	@echo ""
	@echo "Done."

# For making clickable executables.
apps:  $(APPS) $(DYLIBS)

# make some other subsets
progs: $(PROGS)

dylibs: $(DYLIBS)

put:
	@echo ""
	@echo "Installing PHYLIP $(VERSION) binaries in $(EXEDIR)."
	@mkdir -p $(EXEDIR)
	@mv $(APPS) $(EXEDIR)
	@echo "Installing dynamic libraries in $(EXEDIR)."
	@cp $(DYLIBS) $(EXEDIR)
	@echo "Installing jar files in $(EXEDIR)."
	@cp $(JARS) $(EXEDIR)
	@echo "Installing font files in $(EXEDIR)."
	@cp font* $(EXEDIR)
	@echo "Copying testdata to $(EXEDIR)/testdata."
	mkdir $(EXEDIR)/testdata
	for i in $(TESTDIR); do \
          mkdir $(EXEDIR)/testdata/$$i; \
          cp testdata/$$i/*.txt $(EXEDIR)/testdata/$$i; \
        done
	@echo ""
	@echo "Finished installation."

pre-clean:
	@echo ""
	@echo "Removing preexisting executables."
	@rm -rf $(EXEDIR)/*.app
	@echo "Removing preexisting testdata."
	@rm -rf $(EXEDIR)/testdata
	@echo "Ready for new executables."

clean:
	@echo ""
	@echo "Removing object files to save space."
	@rm -f *.o
	@echo ""
	@echo "Finished removing object files.  Now will remove"
	@echo "executable files from the current directory, but not from the"
	@echo "executables directory.  (If some are not here, the makefile"
	@echo "will terminate with an error message but this is not a problem.)"
	@echo ""
	@echo "Removing executables from this directory."
	@rm -f $(PROGS)
	@rm -rf $(APPS)
	@echo ""
	@echo "Finished cleanup."

#
# Compile the shared stuff.
#

Slist.o:      Slist.c Slist.h
	$(CC) -c Slist.c

phylip.o:     phylip.c phylip.h Slist.h
	$(CC) -c phylip.c

# Add this to include debugging facility.
# debug.o:      debug.c debug.h phylip.h Slist.h
#	$(CC) -c debug.c

seq.o:        seq.c phylip.h seq.h
	$(CC) -c seq.c

ml.o:         ml.c phylip.h ml.h
	$(CC) -c ml.c

rest_common.o:  rest_common.c rest_common.h phylip.h
	$(CC) -c rest_common.c

prom_common.o:  prom_common.c prom_common.h phylip.h
	$(CC) -c prom_common.c

parsimony.o:  parsimony.c phylip.h parsimony.h
	$(CC) -c parsimony.c

dnaparsimony.o:  dnaparsimony.c phylip.h parsimony.h dnaparsimony.h
	$(CC) -c dnaparsimony.c

disc.o:       disc.c phylip.h disc.h
	$(CC) -c disc.c

discrete.o:   discrete.c discrete.h phylip.h parsimony.h
	$(CC) -c discrete.c

dollo.o:      dollo.c phylip.h dollo.h
	$(CC) -c dollo.c

wagner.o:     wagner.c phylip.h wagner.h
	$(CC) -c wagner.c

dist.o:       dist.c phylip.h dist.h
	$(CC) -c dist.c

cont.o:       cont.c cont.h phylip.h
	$(CC) -c cont.c

moves.o:      moves.c phylip.h moves.h
	$(CC) -c moves.c

cons.o:       cons.c cons.h phylip.h
	$(CC) -c cons.c

pmatrix.o:    pmatrix.c pmatrix.h
	$(CC) -c pmatrix.c

matrixd.o:    matrixd.c matrixd.h
	$(CC) -c matrixd.c

#
# Compile the individual programs.
#

clique.o:     clique.c disc.h phylip.h
	$(CC) -c clique.c

codml.o:      codml.c ml.h seq.h phylip.h
	$(CC) -c codml.c

consense.o:   consense.c cons.h phylip.h
	$(CC) -c consense.c

contml.o:     contml.c cont.h phylip.h ml.h
	$(CC) -c contml.c

contrast.o:   contrast.c cont.h phylip.h
	$(CC) -c contrast.c

dnacomp.o:    dnacomp.c seq.h phylip.h dnaparsimony.h parsimony.h
	$(CC) -c dnacomp.c

dnadist.o:    dnadist.c pmatrix.h seq.h phylip.h matrixd.h
	$(CC) -c dnadist.c

dnainvar.o:   dnainvar.c seq.h phylip.h
	$(CC) -c dnainvar.c

dnaml.o:      dnaml.c seq.h ml.h phylip.h
	$(CC) -c dnaml.c

dnamlk.o:     dnamlk.c seq.h ml.h phylip.h
	$(CC) -c dnamlk.c

dnamove.o:    dnamove.c seq.h moves.h phylip.h parsimony.h dnaparsimony.h
	$(CC) -c dnamove.c

dnapenny.o:   dnapenny.c seq.h phylip.h parsimony.h dnaparsimony.h
	$(CC) -c dnapenny.c

dnapars.o:    dnapars.c seq.h phylip.h parsimony.h dnaparsimony.h
	$(CC) -c dnapars.c

dolmove.o:    dolmove.c disc.h moves.h dollo.h phylip.h
	$(CC) -c dolmove.c

dollop.o:     dollop.c disc.h dollo.h phylip.h
	$(CC) -c dollop.c

dolpenny.o:   dolpenny.c disc.h dollo.h phylip.h
	$(CC) -c dolpenny.c

draw.o:       draw.c draw.h phylip.h
	$(CC) -c draw.c

draw2.o:      draw2.c draw.h phylip.h
	$(CC) -c draw2.c

drawgram.o:   drawinit.c drawgram.c draw.h phylip.h
	$(CC) -c drawgram.c

drawinit.o:  drawinit.c draw.h
	$(CC) -c drawinit.c

drawtree.o:   drawinit.c drawtree.c draw.h phylip.h
	$(CC) -c drawtree.c

factor.o:     factor.c phylip.h
	$(CC) -c factor.c

fitch.o:      fitch.c dist.h phylip.h ml.h
	$(CC) -c fitch.c

gendist.o:    gendist.c phylip.h pmatrix.c pmatrix.h
	$(CC) -c gendist.c

kitsch.o:     kitsch.c dist.h phylip.h
	$(CC) -c kitsch.c

mix.o:        mix.c disc.h wagner.h phylip.h
	$(CC) -c mix.c

move.o:       move.c disc.h moves.h wagner.h phylip.h
	$(CC) -c move.c

neighbor.o:   neighbor.c dist.h phylip.h
	$(CC) -c neighbor.c

pars.o:       pars.c discrete.h phylip.h parsimony.h
	$(CC) -c pars.c

penny.o:      penny.c disc.h wagner.h phylip.h
	$(CC) -c penny.c

proml.o:      proml.c seq.h ml.h phylip.h prom_common.h prom_common.c
	$(CC) -c proml.c

promlk.o:     promlk.c seq.h ml.h phylip.h prom_common.h prom_common.c
	$(CC) -c promlk.c

protdist.o:   protdist.c seq.h phylip.h pmatrix.c pmatrix.h
	$(CC) -c protdist.c

protpars.o:   protpars.c seq.h phylip.h parsimony.h
	$(CC) -c protpars.c

restdist.o:   restdist.c rest_common.h seq.h phylip.h pmatrix.c pmatrix.h
	$(CC) -c restdist.c

restml.o:     restml.c rest_common.h seq.h ml.h phylip.h
	$(CC) -c restml.c

retree.o:     retree.c moves.h phylip.h
	$(CC) -c retree.c

seqboot.o:    seqboot.c phylip.h
	$(CC) -c seqboot.c

threshml.o:   threshml.c cont.h phylip.h Slist.h
	$(CC) -c threshml.c

treedist.o:   treedist.c cons.h phylip.h
	$(CC) -c treedist.c

#
# Compile libraries
#
libclique.dylib:  clique.o disc.o Slist.o phylip.o
	$(CC)  -shared clique.o disc.o Slist.o phylip.o  -o libclique.dylib

libcodml.dylib:  codml.o ml.o seq.o Slist.o phylip.o
	$(CC)  -shared codml.o ml.o seq.o Slist.o phylip.o -o libcodml.dylib

libconsense.dylib:  phylip.o Slist.o cons.o consense.o
	$(CC)  -shared  phylip.o Slist.o cons.o consense.o  -o libconsense.dylib

libcontml.dylib:  phylip.o Slist.o ml.o cont.o contml.o
	$(CC)  -shared  phylip.o Slist.o ml.o cont.o contml.o  -o libcontml.dylib

libdnacomp.dylib:  phylip.o seq.o parsimony.o dnaparsimony.o Slist.o dnacomp.o
	$(CC)  -shared phylip.o seq.o parsimony.o dnaparsimony.o Slist.o dnacomp.o  -o libdnacomp.dylib

libdnadist.dylib:   phylip.o seq.o Slist.o pmatrix.o matrixd.o dnadist.o
	$(CC)  -shared phylip.o seq.o Slist.o pmatrix.o matrixd.o dnadist.o  -o libdnadist.dylib

libdnainvar.dylib:  phylip.o seq.o Slist.o dnainvar.o
	$(CC)  -shared phylip.o seq.o Slist.o dnainvar.o  -o libdnainvar.dylib

libdnaml.dylib:  phylip.o seq.o ml.o Slist.o dnaml.o
	$(CC)  -shared phylip.o seq.o ml.o Slist.o dnaml.o  -o libdnaml.dylib

libdnamlk.dylib:  phylip.o seq.o ml.o Slist.o dnamlk.o
	$(CC)  -shared phylip.o seq.o ml.o Slist.o dnamlk.o  -o libdnamlk.dylib

libdnapars.dylib:  phylip.o seq.o parsimony.o dnaparsimony.o Slist.o dnapars.o
	$(CC)  -shared phylip.o seq.o parsimony.o dnaparsimony.o Slist.o dnapars.o  -o libdnapars.dylib

libdnapenny.dylib:  phylip.o seq.o parsimony.o dnaparsimony.o Slist.o dnapenny.o
	$(CC)  -shared phylip.o seq.o parsimony.o dnaparsimony.o Slist.o dnapenny.o  -o libdnapenny.dylib

libdollop.dylib:   phylip.o Slist.o dollo.o disc.o dollop.o
	$(CC)  -shared phylip.o Slist.o dollo.o disc.o dollop.o  -o libdollop.dylib

libdolpenny.dylib:  phylip.o Slist.o dollo.o disc.o dolpenny.o
	$(CC)  -shared phylip.o Slist.o dollo.o disc.o dolpenny.o  -o libdolpenny.dylib

libdrawgram.dylib:  drawgram.o drawinit.o draw.o draw2.o Slist.o phylip.o
	$(CC)  -shared drawgram.o drawinit.o draw.o draw2.o Slist.o phylip.o  -o libdrawgram.dylib

libdrawtree.dylib:  drawtree.o drawinit.o draw.o draw2.o Slist.o phylip.o
	$(CC)  -shared drawtree.o drawinit.o draw.o draw2.o Slist.o phylip.o  -o libdrawtree.dylib

libfactor.dylib:   phylip.o Slist.o factor.o
	$(CC)  -shared phylip.o Slist.o factor.o   -o libfactor.dylib

libfitch.dylib:  phylip.o Slist.o ml.o dist.o fitch.o
	$(CC)  -shared phylip.o Slist.o ml.o dist.o fitch.o  -o libfitch.dylib

libgendist.dylib:  phylip.o Slist.o pmatrix.o gendist.o
	$(CC)  -shared phylip.o Slist.o pmatrix.o gendist.o  -o libgendist.dylib

libkitsch.dylib:  phylip.o Slist.o ml.o dist.o kitsch.o
	$(CC)  -shared phylip.o Slist.o ml.o dist.o kitsch.o  -o libkitsch.dylib

libmix.dylib:  phylip.o Slist.o wagner.o disc.o mix.o
	$(CC)  -shared phylip.o Slist.o wagner.o disc.o mix.o  -o libmix.dylib

libneighbor.dylib:  phylip.o Slist.o dist.o neighbor.o
	$(CC)  -shared phylip.o Slist.o dist.o neighbor.o  -o libneighbor.dylib

libpars.dylib:  phylip.o Slist.o parsimony.o discrete.o pars.o
	$(CC)  -shared phylip.o Slist.o parsimony.o discrete.o pars.o  -o libpars.dylib

libpenny.dylib:  phylip.o Slist.o wagner.o disc.o penny.o
	$(CC)  -shared phylip.o Slist.o wagner.o disc.o penny.o  -o libpenny.dylib

libproml.dylib:  phylip.o seq.o ml.o Slist.o prom_common.o proml.o
	$(CC)  -shared phylip.o seq.o ml.o Slist.o prom_common.o proml.o  -o libproml.dylib

libpromlk.dylib:  phylip.o seq.o ml.o Slist.o prom_common.o promlk.o
	$(CC)  -shared phylip.o seq.o ml.o Slist.o prom_common.o promlk.o  -o libpromlk.dylib

libprotdist.dylib:  phylip.o seq.o Slist.o pmatrix.o protdist.o
	$(CC)  -shared phylip.o seq.o Slist.o pmatrix.o protdist.o  -o libprotdist.dylib

libprotpars.dylib:  phylip.o seq.o Slist.o parsimony.o protpars.o
	$(CC)   -shared phylip.o seq.o Slist.o parsimony.o protpars.o  -o libprotpars.dylib

librestdist.dylib:  phylip.o Slist.o pmatrix.o seq.o rest_common.o restdist.o
	$(CC)  -shared phylip.o Slist.o pmatrix.o seq.o rest_common.o restdist.o  -o librestdist.dylib

libseqboot.dylib:  phylip.o seq.o Slist.o seqboot.o
	$(CC)  -shared phylip.o seq.o Slist.o seqboot.o  -o libseqboot.dylib

libtreedist.dylib:  phylip.o Slist.o cons.o treedist.o
	$(CC)  -shared phylip.o Slist.o cons.o treedist.o  -o libtreedist.dylib

#
# Link the individual programs.
#

clique:       clique.o disc.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

codml:        codml.o ml.o seq.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

consense:     consense.o cons.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

contml:       contml.o cont.o ml.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

contrast:     contrast.o cont.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

dnacomp:      dnacomp.o seq.o parsimony.o dnaparsimony.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

dnadist:      dnadist.o pmatrix.o matrixd.o seq.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

dnainvar:     dnainvar.o seq.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

dnaml:        dnaml.o seq.o ml.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

dnamlk:       dnamlk.o seq.o ml.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

dnamove:      dnamove.o seq.o moves.o parsimony.o dnaparsimony.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

dnapenny:     dnapenny.o seq.o parsimony.o dnaparsimony.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

dnapars:      dnapars.o seq.o parsimony.o dnaparsimony.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

dolmove:      dolmove.o disc.o moves.o dollo.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

dollop:       dollop.o disc.o dollo.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

dolpenny:     dolpenny.o disc.o dollo.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

drawgram:     drawgram.o draw.o draw2.o drawinit.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

drawtree:     drawtree.o draw.o draw2.o drawinit.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

factor:       factor.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

fitch:        fitch.o dist.o ml.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

gendist:      gendist.o pmatrix.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

kitsch:       kitsch.o dist.o ml.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

mix:          mix.o disc.o wagner.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

move:         move.o disc.o moves.o wagner.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

neighbor:     neighbor.o dist.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

pars:         pars.o discrete.o parsimony.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

penny:        penny.o disc.o wagner.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

proml:        proml.o prom_common.o seq.o ml.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

promlk:       promlk.o prom_common.o seq.o ml.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

protdist:     protdist.o seq.o pmatrix.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

protpars:     protpars.o seq.o parsimony.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

restdist:     restdist.o rest_common.o seq.o pmatrix.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

restml:       restml.o rest_common.o seq.o ml.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

retree:       retree.o moves.o draw.o draw2.o drawinit.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

seqboot:      seqboot.o seq.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

threshml:     threshml.o cont.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

treedist:     treedist.o cons.o $(LIBS)
	$(CC) $? $(LDADD) -o $@

#
# This is where the clickable executables are made for Mac OS X.
#
%.app:     %
	/Developer/Tools/Rez -d __DARWIN__ -t APPL Carbon.r -o $<
	/Developer/Tools/SetFile -a C $<
	-mkdir -p $@/Contents/MacOS
	-mkdir -p $@/Contents/Resources
	sed -e "s/IDENTIFIER/$</" \
	-e "s/COMMAND/$<.command/" \
	-e "s/EXECUTABLE/$</" \
	-e "s/ICONNAME/$</" \
	-e "s/VERSION/$(VERSION)/" \
	mac/Info.plist.in > $@/Contents/Info.plist
	sed -e "s/EXECUTABLE/$</" \
	mac/command.in > $@/Contents/MacOS/$<.command
	chmod ug+x $@/Contents/MacOS/$<.command
	echo -n "APPL????" >$@/Contents/PkgInfo
	cp $< $@/Contents/MacOS/$<
	cp -f mac/$<.icns $@/Contents/Resources/$<.icns


%.install:	%.app
	@rm -rf $(EXEDIR)/$<
	@mv $< $(EXEDIR)


# ----------------------------------------------------------------------------
#  The following section is used to build a PHYLIP distribution. All sources
#  and other files except the documentation files must be placed in the
#  current directory.  The HTML documentation files must be in folder "doc"
#  within this, the Mac icons in folder "mac", and the Windows icons and
#  resource files must be in folder "icons"
#
#  Usage:
#  	make distdir	- Build the distribution dir phylip-<vers>/
#  	make dist	- Make a tarred and gzipped phylip-<vers>.tar.gz
# ----------------------------------------------------------------------------

DIST_COMMON = phylip.html

DOCS= doc/clique.html doc/consense.html doc/contchar.html doc/contml.html \
      doc/contrast.html doc/discrete.html doc/distance.html doc/dnacomp.html \
      doc/dnadist.html doc/dnainvar.html doc/dnaml.html doc/dnamlk.html \
      doc/dnamove.html doc/dnapars.html doc/dnapenny.html doc/dollop.html \
      doc/dolmove.html doc/dolpenny.html doc/drawgram.html doc/draw.html \
      doc/drawtree.html doc/factor.html doc/fitch.html doc/gendist.html \
      doc/kitsch.html doc/main.html doc/mix.html doc/move.html \
      doc/neighbor.html doc/pars.html doc/penny.html doc/proml.html \
      doc/promlk.html doc/protdist.html doc/protpars.html doc/restdist.html \
      doc/restml.html doc/retree.html doc/seqboot.html doc/sequence.html \
      doc/treedist.html doc/phylip.gif

IMAGES= doc/images/DrawGramCat.png doc/images/DrawGramControls.png \
     doc/images/DrawTreeCat.png doc/images/DrawTreeControls.png \
     doc/images/InputTree.png

SOURCES= COPYRIGHT Makefile.cyg Makefile.osx Makefile.unx linkmac \
     clique.c cons.c consense.c cons.h cont.c \
     cont.h contml.c contrast.c disc.c disc.h discrete.c discrete.h dist.c \
	 dist.h dnacomp.c dnadist.c dnainvar.c dnaml.c dnamlk.c dnamove.c \
	 dnapars.c dnapenny.c dollo.c dollo.h dollop.c dolmove.c dolpenny.c \
	 draw2.c draw.c drawgram.c draw.h drawtree.c \
	 factor.c fitch.c gendist.c \
	 interface.c interface.h io.h kitsch.c macface.c macface.h mix.c move.c \
	 moves.c moves.h neighbor.c newmove.c pars.c penny.c \
	 phylip.c phylip.h proml.c promlk.c protdist.c protpars.c restdist.c \
	 restml.c retree.c seqboot.c seq.c seq.h treedist.c wagner.c wagner.h \
	 mlclock.c mlclock.h printree.c printree.h

MAC= \
		Info.plist.in boot.icns clique.icns command.in consense.icns \
	contml.icns contrast.icns disc.icns dist.icns dna.icns dnacomp.icns \
	dnadist.icns dnainvar.icns dnaml.icns dnamlk.icns dnamove.icns \
	dnapars.icns dnapenny.icns dollo.icns dollop.icns dolmove.icns \
	dolpenny.icns drawgram.icns drawtree.icns factor.icns fitch.icns \
	gendist.icns kitsch.icns mac.sit mix.icns move.icns neighbor.icns \
	pars.icns penny.icns proml.icns promlk.icns protdist.icns protein.icns \
	protpars.icns restdist.icns restml.icns restrict.icns retree.icns \
	seqboot.icns treedist.icns

ICONS= 		boot.ico clique.ico clique.rc clique.rcb consense.ico \
		consense.rc consense.rcb contml.ico contml.rc contml.rcb \
		contrast.ico contrast.rc contrast.rcb disc.ico dist.ico dna.ico \
		dnacomp.rc dnacomp.rcb dnadist.rc dnadist.rcb dnainvar.rc \
		dnainvar.rcb dnaml.rc dnaml.rcb dnamlk.rc dnamlk.rcb dnamove.rc \
		dnamove.rcb dnapars.rc dnapars.rcb dnapenny.rc dnapenny.rcb \
		dollo.ico dollop.rc dollop.rcb dolmove.rc dolmove.rcb \
		dolpenny.rc dolpenny.rcb drawgram.ico drawgram.rc drawgram.rcb \
		drawtree.ico drawtree.rc drawtree.rcb factor.rc factor.rcb \
		fitch.rc fitch.rcb gendist.ico gendist.rc gendist.rcb kitsch.rc \
		kitsch.rcb mix.rc mix.rcb move.rc move.rcb neighbor.rc \
		neighbor.rcb pars.rc pars.rcb penny.rc penny.rcb proml.rc \
		proml.rcb promlk.rc promlk.rcb protdist.rc protdist.rcb \
		protein.ico protpars.rc protpars.rcb restdist.rc restdist.rcb \
		restml.rc restml.rcb restrict.ico retree.ico retree.rc \
		retree.rcb seqboot.rc seqboot.rcb treedist.ico treedist.rc \
		treedist.rcb

FONTS= font1 font2 font3 font4 font5 font6

TESTDIR=   clique consense contml contrast dnacomp \
      dnadist dnainvar dnaml dnamlk dnamove dnapars dnapenny dollop \
      dolmove dolpenny drawgram drawtree factor fitch gendist \
      kitsch mix move neighbor pars penny proml promlk \
      protdist protpars restdist restml retree seqboot  treedist

JARAJAR=    javajars/DrawGram.jar javajars/DrawTree.jar \
        javajars/DrawGramJava.bat javajars/DrawTreeJava.bat \
        javajars/DrawGramJava.exe javajars/DrawTreeJava.exe \
        javajars/DrawGramJava.unx javajars/DrawTreeJava.unx


DISTDIR=$(PACKAGE)-$(VERSION)-osx
dist_SRCDIR=$(DISTDIR)/source
dist_DOCDIR=$(DISTDIR)/doc
dist_IMGDIR=$(DISTDIR)/doc/images
dist_EXEDIR=$(DISTDIR)/exe
dist_JAVADIR=$(DISTDIR)/source/javajars

SHELL=bash

# We can use this target to create a tarred and gzipped distribution of PHYLIP
dist: distdir
	-chmod -R a+r $(DISTDIR)
	tar chozf $(DISTDIR).tar.gz $(DISTDIR)
	-rm -rf $(DISTDIR)

# This target creates the distribution directory which buildDmg.sh uses to build install "disk"
distdir: $(DIST_COMMON) $(DOCS) $(SOURCES)
	-rm -rf $(DISTDIR)
	mkdir $(DISTDIR) && \
	mkdir $(dist_EXEDIR) && \
	mkdir $(dist_DOCDIR) && \
	mkdir $(dist_IMGDIR) && \
	mkdir $(dist_SRCDIR) && \
	mkdir $(dist_JAVADIR)
	mkdir $(dist_SRCDIR)/mac
	mkdir $(dist_SRCDIR)/icons
	mkdir $(dist_SRCDIR)/testdata
	mkdir $(dist_EXEDIR)/testdata
	for i in $(TESTDIR); do \
      mkdir $(dist_SRCDIR)/testdata/$$i; \
      cp testdata/$$i/*.txt $(dist_SRCDIR)/testdata/$$i; \
    done
	for i in $(TESTDIR); do \
      mkdir $(dist_EXEDIR)/testdata/$$i; \
      cp testdata/$$i/*.txt $(dist_EXEDIR)/testdata/$$i; \
    done
	for i in $(DIST_COMMON) ; do \
	  cp -r $$i $(DISTDIR) ; \
	done
	cp $(DISTDIR)/phylip.html $(DISTDIR)/help.html
	for i in $(DOCS) ; do \
	  cp -r $$i $(dist_DOCDIR) ; \
	done
	for i in $(IMAGES) ; do \
	  cp -r $$i $(dist_IMGDIR) ; \
	done
	for i in $(SOURCES) ; do \
	  cp -r $$i $(dist_SRCDIR) ; \
	done
	for i in $(MAC) ; do \
	  cp -r mac/$$i $(dist_SRCDIR)/mac ; \
	done
	for i in $(ICONS) ; do \
	  cp -r icons/$$i $(dist_SRCDIR)/icons ; \
	done
	for i in $(FONTS) ; do \
	  cp -r $$i $(dist_SRCDIR) ; \
	done
	for i in $(JARAJAR) ; do \
	  cp $$i $(dist_JAVADIR) ; \
	done
	for i in $(APPS) ; do \
	  cp -r $(EXEDIR)/$$i $(dist_EXEDIR); \
	done
	for i in $(FONTS) ; do \
	  cp -r $$i $(dist_EXEDIR) ; \
	done
	cp $(DYLIBS) $(dist_EXEDIR)
	cp $(JARS) $(dist_EXEDIR)
	cp buildDmg.sh $(dist_SRCDIR)
	cp SFXWiz32.exe $(dist_SRCDIR)

# This target untars the dist and checks that it can be compiled and remade
distcheck: dist
	-rm -rf $(DISTDIR)
	tar xzf $(DISTDIR).tar.gz
	cd $(DISTDIR)/$(SRCDIR) \
	  && make all
	-rm -rf $(DISTDIR)
	@echo "$(DISTDIR).tar.gz is ready for distribution"


# End.
